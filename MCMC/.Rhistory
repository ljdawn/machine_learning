if(grepl(rownames(state)[i],x$names[j],ignore.case=T))
x$measure[j]<-as.double(state$Murder[i])
} }
colors <- brewer.pal(7,"Reds")
sd <- data.frame(col=colors,values=seq(min(x$measure[!is.na(x$measure)]),max(x$measure[!is.na(x$measure)])*1.0001,length.out=7))
breaks<-sd$values
matchcol<-function(y) {as.character(sd$col[findInterval(y,sd$values)])}
layout(matrix(data=c(2,1), nrow=1, ncol=2),widths=c(8,1), heights=c(8,1))
par(mar = c(20,1,20,7),oma=c(0.2,0.2,0.2,0.2),mex=0.5)
image(x=1, y=0:length(breaks),z=t(matrix(breaks))*1.001,col=colors[1:length(breaks)-1],axes=FALSE,breaks=breaks,xlab="", ylab="", xaxt="n")
library(maps)
library(WDI)
library(RColorBrewer)
state <- read.table("~/Dropbox/alibaba_taobao/state.x77.txt", header=T, quote="\"")
x<-map("state",plot=FALSE)
for(i in 1:length(rownames(USArrests))) {
for(j in 1:length(x$names)) {
if(grepl(rownames(USArrests)[i],x$names[j],ignore.case=T))
x$measure[j]<-as.double(USArrests$Murder[i])
} }
colors <- brewer.pal(7,"Reds")
sd <- data.frame(col=colors,values=seq(min(x$measure[!is.na(x$measure)]),max(x$measure[!is.na(x$measure)])*1.0001,length.out=7))
breaks<-sd$values
matchcol<-function(y) {as.character(sd$col[findInterval(y,sd$values)])}
layout(matrix(data=c(2,1), nrow=1, ncol=2),widths=c(8,1), heights=c(8,1))
par(mar = c(20,1,20,7),oma=c(0.2,0.2,0.2,0.2),mex=0.5)
image(x=1, y=0:length(breaks),z=t(matrix(breaks))*1.001,col=colors[1:length(breaks)-1],axes=FALSE,breaks=breaks,xlab="", ylab="", xaxt="n")
x=rnorm(20)
x
y=3*x+5+rnorm(20,sd=0.3)
y
reslm=lm(y∼x)
reslm=lm(y~x)
summry(reslm)
summary(reslm)
x=rnorm(25)
x
t.test(x)
a=2.7; b=6.3; c=2.669
Nsim=5000;
a=2.7; b=6.3; c=2.669;
Nsim=5000;
X=rep(runif(1),Nsim)
fix(X)
for (i in 2:Nsim){
Y=runif(1);
rho=dbeta(Y,a,b)/dbeta(X[i-1],a,b);
X[i]=X[i-1] + (Y-X[i-1])*(runif(1)<rho)
}
fix(X)
plot(X)
rgamma(3,2.5,4.5)
rgamma(3,2.5,4.5)
rgamma(3,2.5,4.5)
x <- runif(100, min=2, max=5)
x <- runif(100, min=2, max=5)
plot(x)
Nsim=10^4
x=runif(Nsim)
Nsim=10^4
x=runif(Nsim)
x1=x[-Nsim]
fix(`x1`)
x2=x[-1]
par(mfrow=c(1,3))
hist(x)
plot(x1,x2)
acf(x)
U=runif(3*10^4)
U=matrix(data=U,nrow=3)
X=-log(U)
X=2* apply(X,2,sum)
xm=rcauchy(500)
f=function(y){-sum(log(1+(x-y)^2))}
xm=rcauchy(500)
for (i in 1:500){
x=xm[1:i]
mi=optimise(f,interval=c(-10,10),max=T)$max
}
for (i in 1:500){
x=xm[1:i]
mi=optimize(f,interval=c(-10,10),max=T)$max
}
for (i in 1:500){
x=xm[1:i]
mi=optimize(f,interval=c(-10,10))$max
}
}
fix(x)
?optimize
xm=rcauchy(500)
f=function(y){-sum(log(1+(x-y)^2))}
for (i in 1:500){
x=xm[1:i]
mi=optimize(f,interval=c(-10,10),maximum = TRUE)$max
}
xm=rcauchy(500)
f=function(y){-sum(log(1+(x-y)^2))}
for (i in 1:500){
x=xm[1:i]
printf (x)
mi=optimize(f,interval=c(-10,10),maximum = TRUE)$max
}
xm=rcauchy(500)
f=function(y){-sum(log(1+(x-y)^2))}
for (i in 1:500){
x=xm[1:i]
fprint (x)
mi=optimize(f,interval=c(-10,10),maximum = TRUE)$max
}
for (i in 1:500){
x=xm[1:i]
print (x)
mi=optimize(f,interval=c(-10,10),maximum = TRUE)$max
}
da=rbind(rnorm(10^2),2.5+rnorm(3*10^2))
like=function(mu){sum(log((.25*dnorm(da-mu[1])+.75*dnorm(da-mu[2]))))}
sta=c(1,1)
mmu=sta
fix(mmu)
?nlm
nlm(like,sta)$it
nlm(like,sta)
?nlm
? optimize
h = 20
c = 10
d = 10
miu = runif(1,0,1/6)
b = round(runif(1,1,20))
miu = runif(1,0,1/6)
b = round(runif(1,1,20))
iter = 1
nonstop=TRUE
while (nonstop) {
b = c(b,miu[iter]*h/(0.5+miu[iter]))
miu = c(miu,(b[iter+1] + c)/(6*(b[iter+1]+c+d)))
iter = iter + 1
nonstop = (miu[iter]-miu[iter-1]>10^(-4))
}
print(cbind(miu,b))
miu1 <- 3
miu2 <- -2
sigma1 <- 1
sigma2 <- 2
alpha1 <- 0.4
alpha2 <- 0.6
miu1 <- 3
miu2 <- -2
sigma1 <- 1
sigma2 <- 2
alpha1 <- 0.4
alpha2 <- 0.6
n <- 5000
x <- rep(0,n)
fix(x)
n <- 5000
x <- rep(0,n)
n1 <- floor(n*alpha1)
n2 <- n - n1
x[1:n1] <- rnorm(n1)*sigma1 + miu1
x[(n1+1):n] <- rnorm(n2)*sigma2 + miu2
hist(x,freq=F)
lines(density(x),col='red')
m <- 2
miu <- runif(m)
sigma <- runif(m)
alpha <- c(0.2,0.8)
fix(miu)
prob <- matrix(rep(0,n*m),ncol=m)
rstudio::viewData(prob)
for (step in 1:100){
# E步骤
for (j in 1:m){
prob[,j]<- sapply(x,dnorm,miu[j],sigma[j])
}
sumprob <- rowSums(prob)
prob<- prob/sumprob
oldmiu <- miu
oldsigma <- sigma
oldalpha <- alpha
# M步骤
for (j in 1:m){
p1 <- sum(prob[ ,j])
p2 <- sum(prob[ ,j]*x)
miu[j] <- p2/p1
alpha[j] <- p1/n
p3 <- sum(prob[ ,j]*(x-miu[j])^2)
sigma[j] <- sqrt(p3/p1)
}
# 变化
epsilo <- 1e-4
if (sum(abs(miu-oldmiu))<epsilo &
sum(abs(sigma-oldsigma))<epsilo &
sum(abs(alpha-oldalpha))<epsilo) break
cat('step',step,'miu',miu,'sigma',sigma,'alpha',alpha,'\n')
}
y=geneq(x[t])
X=c(rt(1,1))
X=c(rt(1,1))
Nsim=10^4
X=c(rt(1,1))
for (t in 2:Nsim){
Y=rnorm(1)   # candidate normal
rho=dt(Y,1)*dnorm(X[t-1])/(dt(X[t-1],1)*dnorm(Y))
X[t]=X[t-1] + (Y-X[t-1])*(runif(1)<rho)
}
hist(X[5000:])
hist(X)
hist(X[1:10])
hist(X[5000:10000])
dnorm(X[t-1])
gamma
gamma(5/2)
?glm
print 5
print (5)
if (5 = 3) print (6
if (5 = 3) print (6)
if (5 == 3) print (6)
if (5 == 3)
print (444)
if (5 == 5)
print(6
)
matrix(1:4,ncol=3)
state=c("tas","tas","sa","sa","wa")
state
statef=factor(state)
statef
a = c(1,2,3,4,5,6,7,8,9,10)
b <- factor(a)
b
levels(statef)
incomes=c(60,59,40,42,23)
tapply(incomes,statef,mean)
statef
statef=factor(state,
+ levels=c("tas","sa","wa","yo"))
statef=factor(state,+ levels=c("tas","sa","wa","yo"))
levels=c("tas","sa","wa","yo")
statef=factor(state, + levels
)
b=matrix(1:9,ncol=3)
var(b)
b
Nsim=10^3
y=rexp(Nsim)+4.5
y
weit=dnorm(y)/dexp(y-4.5)
plot(cumsum(weit)/1:Nsim,type="l")
abline(a=pnorm(-4.5),b=0,col="red")
a=2.7; b=6.3; c=2.669
Nsim=5000
X=rep(runif(1),Nsim)
X
for (i in 2:Nsim){
Y=runif(1)
rho=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
X[i]=X[i-1] + (Y-X[i-1])*(runif(1)<rho)
}
X
plot(X)
Nsim=10^4
X=c(rt(1,1))
X
his(X)
his
?his
hist(X)
X
a=2.7; b=6.3; c=2.669
Nsim=5000
X=rep(runif(1),Nsim)
for (i in 2:Nsim){
Y=runif(1)
rho=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
X[i]=X[i-1] + (Y-X[i-1])*(runif(1)<rho)
}
X
hist(X)
hist(X[500:5000])
load(dataset)
scale=1
the=matrix(runif(2,-2,5),ncol=2)
th3
the
curlike=hval=like(x)
a = b = c = 4
a
s
d
b
c
Nsim=10^4
U=runif(Nsim)
Nsim=10^4
U=runif(Nsim)
plot (U)
X=-log(U)
plot (X)
Y=rexp(Nsim)
plot (Y)
par(mfrow=c(1,2))
hist(X,freq=F,main="Exp from Uniform")
hist(Y,freq=F,main="Exp from R")
hist(X)
hist(X,freq=F,main="Exp from Uniform")
hist(Y,freq=F,main="Exp from R")
hist(Y,freq=F,main="Exp from R")
hist(X)
hist(X,freq=F,main="Exp from Uniform")
U=runif(3*10^4)
plot(U)
U=matrix(data=U,nrow=3)
X=-log(U)
X=-log(U)
X=2* apply(X,2,sum)
X=2* apply(X,2,sum)
X=-log(U)
X=2* apply(X,2,sum)
x
X
Nsim=10^4; lambda=100;
spread=3*sqrt(lambda)
t=round(seq(max(0,lambda-spread),lambda+spread,1))
fix(t)
prob=ppois(t, lambda)
fix(prob)
?ppois
X=rep(0,Nsim)
fix(X)
prob<u
u=runif(1)
prob<u
prob<u
u=runif(1)
prob<u
for (i in 1:Nsim){
u=runif(1);
X[i]=t[1]+sum(prob<u);
}
plot(X)
Nsim=10^4
n=6;p=.3
y=rgamma(Nsim,n,rate=p/(1-p))
x=rpois(Nsim,y)
hist(x,main="",freq=F,col="grey",breaks=40)
lines(1:50,dnbinom(1:50,n,p),lwd=2,col="sienna")
?rpois
Nsim=2500
a=2.7;b=6.3
M=2.67
u=runif(Nsim,max=M)
y=runif(Nsim)
x=y[u<dbeta(y,a,b)]
x
plot(x)
an <- optimize(f=function(x){dbeta(x,2.7,6.3)/dbeta(x,2,6)},max=T,interval=c(0,1))$objective
?optimize
an <- optimize(f=function(x){dbeta(x,2.7,6.3)/dbeta(x,2,6)},maximum=T,interval=c(0,1))$objective
an
ch=function(la){integrate(function(x){x^(la-1)*exp(-x)},0,Inf)$val}
plot(lgamma(seq(.01,10,le=100)),log(apply(as.matrix(
seq(.01,10,le=100)),1,ch)),xlab="log(integrate(f))",
ylab=expression(log(Gamma(lambda))),pch=19,cex=.6)
cac=rcauchy(10)+350;
cac=rcauchy(10)+350;
fix(cac)
lik=function(the){
u=dcauchy(cac[1]-the)
for (i in 2:10)
u = u*dcauchy(cac[i]-the)
return(u)}
integrate(lik,-Inf,Inf)
h=function(x){(cos(50*x)+sin(20*x))^2};
par(mar=c(2,2,2,1),mfrow=c(2,1))
curve(h,xlab="Function",ylab="",lwd=2)
integrate(h,0,1)
x=h(runif(10^4))
estint=cumsum(x)/(1:10^4)
?cumsum
fix(estint)
cumsum(1:10)
estint=cumsum(x)/(1:10^4)
esterr=sqrt(cumsum((x-estint)^2))/(1:10^4)
plot(estint, xlab="Mean and error range",type="l",lwd=
2,ylim=mean(x)+20*c(-esterr[10^4],esterr[10^4]),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
fix(estint)
(1:10^4)
x=rnorm(10^8)
x=rnorm(10^8)
qnorm
qnorm()
qnorm(8)
bound=qnorm(c(.5,.75,.8,.9,.95,.99,.999,.9999))
fix(bound)
?norm
?qnorm
res=matrix(0,ncol=8,nrow=7)
rstudio::viewData(res)
for (i in 2:8)
for (j in 1:8)
res[i-1,j]=mean(x[1:10^i]<bound[j])
rstudio::viewData(res)
fix(bound)
qonrm(c(1))
qnorm(c(1))
qnorm(c(1,1,1,1,))
qnorm(c(1,1,1,1))
qnorm(c(1,1,1,99))
qnorm(c(1,1,1,9))
qnorm(c(1,1,1,1))
qnorm(c(1,1,1,0.2))
qnorm(c(1,1,1,0.333333))
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
bound=qnorm(c(.5,.75,.8,.9,.95,.99,.999,.9999))//right anwser
bound=qnorm(c(.5,.75,.8,.9,.95,.99,.999,.9999))%right anwser
bound=qnorm(c(.5,.75,.8,.9,.95,.99,.999,.9999))
%right anwser
#right anwser
Nsim=10^3
y=rexp(Nsim)+4.5
weit=dnorm(y)/dexp(y-4.5)
plot(cumsum(weit)/1:Nsim,type="l")
abline(a=pnorm(-4.5),b=0,col="red")
install.packages("ggplot2")
a=2.7; b=6.3; c=2.669
Nsim=5000
X=rep(runif(1),Nsim)
fix(X)
X[i]=X[i-1] + (Y-X[i-1])*(runif(1)<rho)}
for (i in 2:Nsim){
Y=runif(1)
rho=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
X[i]=X[i-1] + (Y-X[i-1])*(runif(1)<rho)}
plot(X)
?table
a <- rep(c(NA, 1/0:3), 10)
a
a <- rep(c(NA, 1/0:3), 10)
a
table(1)
table(a)
a <-c(0,1,2,3)
table(a)
a <-c(0,1,2,3,5,5,5,5)
a
table(a)
b <-c(1,3,4)
table(a,b)
a
factor(1)
factor(a)
e=gamma(e^2,log=T)
e<-gamma(e^2,log=T)
setwd("~/machine_learning/MCMC")
e<-gamma(e^2,log=T)
e<-gamma(e^2,log=T)
a=c(5,5.6,1,4,-5)
a
state=c("tas","tas","sa","sa","wa")
statef=factor(state)
levels(statef)
incomes=c(60,59,40,42,23)
tapply(incomes,statef,mean)
apply(incomes,statef,mean)
tapply(incomes,statef,mean)
statef=factor(state,              + levels=c("tas","sa","wa","yo"))
statef=factor(state,+ levels=c("tas","sa","wa","yo"))
statef=factor(state+ levels=c("tas","sa","wa","yo"))
statef=factor(state+ levels=c("tas","s]wa","yo"))
li=list(num=1:5,y="color",a=T)
li[1]
li$num
y = c(4.313, 4.513, 5.489, 4.265, 3.641, 5.106, 8.006, 5.087)
ystar=sample(y,replace=T)
ystar
rgamma(3,2.5,4.5)
rgamma(3,2.5,4.5)
Nsim=10^4
x=runif(Nsim)
acf(x)
Nsim=10^4; lambda=100
spread=3*sqrt(lambda)
t=round(seq(max(0,lambda-spread),lambda+spread,1))
t
prob=ppois(t, lambda)
prob
?ppois
prob
prob
prob
prob
prob
t[1]
t[1]
y=randg(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
data(logit)
library(mcmc)
install.packages("mcmc")
library(mcmc)
library(mcmc)
