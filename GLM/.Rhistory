print (5)
q()
library(maps)
library(RColorBrewer)
install.packages("maps")
library(maps)
install.packages("RColorBrewer")
install.packages("car")
map("state", boundary = FALSE,col=matchcol(x$measure),fill=TRUE,lty="blank")
state <- read.table("state.x77.txt", header=T, quote="\"")
x<-map("state",plot=FALSE)
for(i in 1:length(rownames(state))) {
for(j in 1:length(x$names)) {
if(grepl(rownames(state)[i],x$names[j],ignore.case=T))
x$measure[j]<-as.double(state$Murder[i])
} }
colors <- brewer.pal(7,"Blues")
sd <- data.frame(col=colors,values=seq(min(x$measure[!is.na(x$measure)]),max(x$measure[!is.na(x$measure)])*1.0001,length.out=7))
breaks<-sd$values
matchcol<-function(y) {as.character(sd$col[findInterval(y,sd$values)])}
state <- read.table("state.x77.txt", header=T, quote="\"")
x<-map("state",plot=FALSE)
for(i in 1:length(rownames(state))) {
for(j in 1:length(x$names)) {
if(grepl(rownames(state)[i],x$names[j],ignore.case=T))
x$measure[j]<-as.double(state$Murder[i])
} }
colors <- brewer.pal(7,"Blues")
sd <- data.frame(col=colors,values=seq(min(x$measure[!is.na(x$measure)]),max(x$measure[!is.na(x$measure)])*1.0001,length.out=7))
breaks<-sd$values
matchcol<-function(y) {as.character(sd$col[findInterval(y,sd$values)])}
map("state", boundary = FALSE,fill=TRUE,lty="blank")
map("china", boundary = FALSE,fill=TRUE,lty="blank")
?map
library(mapdata)
install.packages("library(mapdata)")
install.packages("mapdata")
map("china")
library(mapdata)
map("china")
Ys_Xs <- read.csv("C:/Users/zhangxuan07/Desktop/Ys_Xs.csv", header=F)
View(Ys_Xs)
Ys_Xs$V1
Ys_Xs[-1]
model <- lm(Ys_Xs$V2~Ys_Xs$V11 )
summary(model)
model <- lm(Ys_Xs$V2~. )
model <- lm(Ys_Xs$V2~Ys_Xs. )
model <- lm(V2~. data=Ys_Xs)
model <- lm(Ys_Xs$V2~. data=Ys_Xs)
model <- lm(Ys_Xs$V2~ . data=Ys_Xs)
model <- lm(Ys_Xs$V2 ~ . data=Ys_Xs)
model <- lm(Ys_Xs$V2~.)
model <- lm(Ys_Xs$V2~. data=Ys_Xs)
model <- lm(Ys_Xs$V2~. data = Ys_Xs)
model <- lm(Ys_Xs$V2~. data = 'Ys_Xs')
model <- lm(Ys_Xs$V2~ data = 'Ys_Xs')
model <- lm(Ys_Xs$V2~. data = 'Ys_Xs')
model <- lm(Ys_Xs$V2~. ,data = 'Ys_Xs')
model <- lm(Ys_Xs$V2~. ,data =Ys_Xs)
summary(model)
step(model)
load("D:/R/201308/0826.RData")
load("D:/R/201308/0826_1.RData")
summary(model4)
TPR=rep(0,1000)
FPR=rep(0,1000)
for(i in 1:1000){
p0=i/1000;
SI0.true=a;
SI0.pred=1*(p>p0)
TPR[i]=sum(SI0.pred*SI0.true)/sum(SI0.true)
FPR[i]=sum(SI0.pred*(1-SI0.true))/sum(1-SI0.true)}
a<-Y3[,1]
TPR=rep(0,1000)
FPR=rep(0,1000)
for(i in 1:1000){
p0=i/1000;
SI0.true=a;
SI0.pred=1*(p>p0)
TPR[i]=sum(SI0.pred*SI0.true)/sum(SI0.true)
FPR[i]=sum(SI0.pred*(1-SI0.true))/sum(1-SI0.true)}
load("D:/R/201308/0826_5.RData")
TPR=rep(0,1000)
FPR=rep(0,1000)
for(i in 1:1000){
p0=i/1000;
SI0.true=a;
SI0.pred=1*(p>p0)
TPR[i]=sum(SI0.pred*SI0.true)/sum(SI0.true)
FPR[i]=sum(SI0.pred*(1-SI0.true))/sum(1-SI0.true)}
Yplot(FPR,TPR,type="l",col=2)
plot(FPR,TPR,type="l",col=2)
points(c(0,1),c(0,1),type="l",lty=2)
summary(model4)
summary(model3)
table(a,b)
b = 1*(p>0.5)
table(a,b)
22551/(22551+7808)
7005/(7005+18332)
load("D:/R/201308/0826_2.RData")
load("D:/R/201308/0826_3.RData")
summary(model4)
load("D:/R/201308/0826_4.RData")
load("D:/R/201308/0826_5.RData")
load("D:/R/201308/0826_1.RData")
summary(model4)
b<-predict(model4,Y3)
b
a
c <- Y3[1]
c
table(c,a)
a
b
table(c,b)
table(c,b.sort())
sb<-b.sort()
sb<-sort.list(b)
table(c,sb)
sc<-sort.list(c)
install.packages("plm")
library(plm)
install.packages("AER")
data(Affairs, package="AER")
summary(Affairs)
fit <- lm(weight ~ height, data=women)
summary(fit)
qf(0.05,60,55636)
?qf
qf(0.05,1,13)
states <- as.data.frame(state.x77[,c("Murder", "Population",
"Illiteracy", "Income", "Frost")])
cor(states)
library(car)
scatterplotMatrix(states, spread=FALSE, lty.smooth=2,
main="Scatter Plot Matrix")
library(car)
warnings()
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
qqPlot(fit, labels=row.names(states), id.method="identify",
simulate=TRUE, main="Q-Q Plot")
library(car)
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
states <- as.data.frame(state.x77[,c("Murder", "Population","Illiteracy", "Income", "Frost")])
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
plot(fit)
plot(fit)
qqPlot(fit, labels=row.names(states), id.method="identify",
simulate=TRUE, main="Q-Q Plot")
simulate=TRUE, main="Q-Q Plot")
qqPlot(fit, labels=row.names(states), id.method="identify",
simulate=TRUE, main="Q-Q Plot")
load("D:/R/201308/0826_2.RData")
View(states)
View(states)
load("D:/R/201308/0826_3.RData")
load("D:/R/201308/0826_4.RData")
load("D:/R/201308/0826_5.RData")
load("D:/R/201308/0826_2.RData")
load("D:/R/201308/0826.RData")
fit <- lm(V2~.,data=Y3)
plot(fit)
plot(fit)
plot(fit)
plot(fit)
load("D:/R/201308/0826_5.RData")
load("D:/R/201308/0826_4.RData")
load("D:/R/201308/0826_2.RData")
load("D:/R/201308/0826_1.RData")
plot(model4)
plot(model4)
plot(model3)
library(car)
ncvTest(model4)
ncvTest(model3)
ncvTest(model4)
spreadLevelPlot(model4)
plot(model4)
crPlots(model4)
install.packages("igraph")
library(igraph)
c<-(293,1135,609,438,1893,1481,1678,1794,1552,1827,1664,1200,1624,1654,595,1601,2370,1838,2070,2150,1825,2146,2277,1588,1758,1399,1668,999,3262,2308,2375,2103,2009,1861,2109,1630,2132,429)
data<-c(293,1135,609,438,1893,1481,1678,1794,1552,1827,1664,1200,1624,1654,595,1601,2370,1838,2070,2150,1825,2146,2277,1588,1758,1399,1668,999,3262,2308,2375,2103,2009,1861,2109,1630,2132,429)
tsdata<-ts(data, freq=12, start=c(2010,12))
tsdata
data<-c(1135,609,438,1893,1481,1678,1794,1552,1827,1664,1200,1624,1654,595,1601,2370,1838,2070,2150,1825,2146,2277,1588,1758,1399,1668,999,3262,2308,2375,2103,2009,1861,2109,1630,2132)
tsdata<-ts(data, freq=12, start=c(2010,12))
tsdata
it<-0
for(p in 1:2){
+ for(d in 0:1){
+ for(q in 0:1){
+ fit <- arima(tsdata, order=c(p,d,q))
+ it<-it+1
+ if (it==1){
+ minaic<-fit$aic
+ orderp<-p
+ orderd<-d
+ orderq<-q
+ }
+ else{
+ if(fit$aic<minaic){
+ minaic<fit$aic
+ orderp<-p
+ orderd<-d
+ orderq<-q
+ }}}}}
acf(tsdata)
acf(tsdata)
plot(stl(ts,s.window='per')))
plot(stl(ts,s.window='per'))
plot(stl(ts,s.window="per"))
plot(stl(tsdata,s.window="per"))
d07<-c(1135,609,438,1893,1481,1678,1794,1552,1827,1664,1200,1624,1654,595,1601,2370,1838,2070,2150,1825,2146,2277,1588,1758,1399,1668,999,3262,2308,2375,2103,2009,1861,2109,1630,2132)
dper<-c(319,259,225,373,339,347,352,341,363,341,301,347,347,231,356,400,379,405,429,403,421,435,386,382,368,380,337,428,418,414,428,421,429,431,401,432)
test <- lm(d07~dper)
summary(test)
test <- lm(d07~dper-1)
summary(test)
data<-(1,7,67,2,86,5,65,70,3,65,249,67,52,60,5,65,67,66,2,2,71,70,59,85,61,5,65,63,40,41,1,27,51,83,76,67,55,58,64,69,68,76,51,64,91,4,62,48,1,61,1,70,58,73,1,67,55,4,69,1,5,119,1,1,56,27,37,63,35,32,35,46,35,34,29,33,4,35,50,9,4,103,72,302,2,39,15,73,13,33,17,57,44,16,60,11,15,46,9,1,69,7,25,16,1,2,4,276,3,3,70,3,2,1,53,3,3,1,2,27,56,37,55,56,2,1,1,2,35,32,48,34,35,48,1,26,1,11,66,24,24,280,17,72,15,19,262,1,53,42,6,108,60,95,17,35,94,90,1,270,280,2,92,3,188,104,14,81,59,90,57,5,36,51,35,326,6,73,289,279,5,56,65,1,61,61,74,13,20,2,76,73,60,61,69,67,6,80,140,70,240,16,64,78,1,95,102,6,19,1,297,92,6,75,80,83,96,63,75,92,56,82,11,18,65,3,3,31,32,72,40,2,11,21,70,71,53,328,79,20,62,44,10,53,10,62,1,2,73,3,81,1,68,75,3,70,2,3,50,69,79,83,10,61,2,21,36,20,37,66,25,67,33,21,33,44,45,94,46,31,43,95,42,8,18,6,1,14,88,28,17,14,27,34,23,55,18,49,48,29,27,20,32,90,62,33,41,79,38,7,74,73,2,58,65,1,86,1,87,70,66,2,59,71,102,69,69,55,3,63,2,73,60,37,11,70,63,39,71,4,67,62,69,24,56,34,58,93,44,6,43,34,2,27,61,1,26,230,35,61,77,68,3,72,2,40,72,70,45,54,52,56,62,6,44,14,3,14,1,36,2,73,64,60,65,18,74,74,7,29,71,32,9,39,38,39,45,39,62,227,31,96,58,57,98,64,81,84,97,95,97,1,24,60,78,1,65,1,47,69,71,1,67,51,93,60,4,5,6,8,1,1,50,68,61,30,2,48,66,28,59,46,11,1,51,7,59,5,71,1,38,45,51,39,34,61,3,42,1,4,16,3,1,39,39,42,36,150,43,67,40,3,56,4,62,1,40,73,93,2,5,2,42,264,1,26,82,1,1,10,72,63,3,95,64,6,16,76,95,91,1,60,96,3,92,70,1,93,10,13,77,67,52,74,68,53,11,38,2,34,16,47,2,24,6,71,68,74,26,53,51,71,47,68,85,71,4,64,69,72,55,36,65,9,15,56,33,3,123,2,66,30,1,84,73,78,89,4,65,88,78,42,72,63,65,86,1,1,90,262,72,66,47,90,20,51,102,86,78,3,79,14,4,40,5,81,50,67,1,42,73,61,76,66,1,81,66,46,8,61,1,87,70,3,58,61,9,24,22,26,15,63,39,73,54,15,17,71,32,57,101,85,1,48,1,45,2,50,75,56,48,58,200,2,91,1,2,3,92,50,89,68,96,85,17,177,65,57,63,55,70,68,73,67,72,70,63,32,72,26,40,76,27,43,69,35,61,64,38,36,38,39,16,34,23,27,16,4,5,63,40,5,4,36,73,10,17,34,48,60,31,54,39,12,24,42,4,61,51,23,58,22,24,20,6,22,8)
data<-c(1,7,67,2,86,5,65,70,3,65,249,67,52,60,5,65,67,66,2,2,71,70,59,85,61,5,65,63,40,41,1,27,51,83,76,67,55,58,64,69,68,76,51,64,91,4,62,48,1,61,1,70,58,73,1,67,55,4,69,1,5,119,1,1,56,27,37,63,35,32,35,46,35,34,29,33,4,35,50,9,4,103,72,302,2,39,15,73,13,33,17,57,44,16,60,11,15,46,9,1,69,7,25,16,1,2,4,276,3,3,70,3,2,1,53,3,3,1,2,27,56,37,55,56,2,1,1,2,35,32,48,34,35,48,1,26,1,11,66,24,24,280,17,72,15,19,262,1,53,42,6,108,60,95,17,35,94,90,1,270,280,2,92,3,188,104,14,81,59,90,57,5,36,51,35,326,6,73,289,279,5,56,65,1,61,61,74,13,20,2,76,73,60,61,69,67,6,80,140,70,240,16,64,78,1,95,102,6,19,1,297,92,6,75,80,83,96,63,75,92,56,82,11,18,65,3,3,31,32,72,40,2,11,21,70,71,53,328,79,20,62,44,10,53,10,62,1,2,73,3,81,1,68,75,3,70,2,3,50,69,79,83,10,61,2,21,36,20,37,66,25,67,33,21,33,44,45,94,46,31,43,95,42,8,18,6,1,14,88,28,17,14,27,34,23,55,18,49,48,29,27,20,32,90,62,33,41,79,38,7,74,73,2,58,65,1,86,1,87,70,66,2,59,71,102,69,69,55,3,63,2,73,60,37,11,70,63,39,71,4,67,62,69,24,56,34,58,93,44,6,43,34,2,27,61,1,26,230,35,61,77,68,3,72,2,40,72,70,45,54,52,56,62,6,44,14,3,14,1,36,2,73,64,60,65,18,74,74,7,29,71,32,9,39,38,39,45,39,62,227,31,96,58,57,98,64,81,84,97,95,97,1,24,60,78,1,65,1,47,69,71,1,67,51,93,60,4,5,6,8,1,1,50,68,61,30,2,48,66,28,59,46,11,1,51,7,59,5,71,1,38,45,51,39,34,61,3,42,1,4,16,3,1,39,39,42,36,150,43,67,40,3,56,4,62,1,40,73,93,2,5,2,42,264,1,26,82,1,1,10,72,63,3,95,64,6,16,76,95,91,1,60,96,3,92,70,1,93,10,13,77,67,52,74,68,53,11,38,2,34,16,47,2,24,6,71,68,74,26,53,51,71,47,68,85,71,4,64,69,72,55,36,65,9,15,56,33,3,123,2,66,30,1,84,73,78,89,4,65,88,78,42,72,63,65,86,1,1,90,262,72,66,47,90,20,51,102,86,78,3,79,14,4,40,5,81,50,67,1,42,73,61,76,66,1,81,66,46,8,61,1,87,70,3,58,61,9,24,22,26,15,63,39,73,54,15,17,71,32,57,101,85,1,48,1,45,2,50,75,56,48,58,200,2,91,1,2,3,92,50,89,68,96,85,17,177,65,57,63,55,70,68,73,67,72,70,63,32,72,26,40,76,27,43,69,35,61,64,38,36,38,39,16,34,23,27,16,4,5,63,40,5,4,36,73,10,17,34,48,60,31,54,39,12,24,42,4,61,51,23,58,22,24,20,6,22,8)
t.test(data)
?hist
hist(data)
hist(data,10)
?hist
hist(data,50)
hist(data,100)
hist(data,100)
life = data.frame(
X1=c(2.5, 173, 119, 10, 502, 4, 14.4, 2, 40, 6.6,21.4, 2.8, 2.5, 6, 3.5, 62.2, 10.8, 21.6, 2, 3.4,5.1, 2.4, 1.7, 1.1, 12.8, 1.2, 3.5, 39.7, 62.4, 2.4,34.7, 28.4, 0.9, 30.6, 5.8, 6.1, 2.7, 4.7, 128, 35,2, 8.5, 2, 2, 4.3, 244.8, 4, 5.1, 32, 1.4),
X2=rep(c(0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2, 0, 2, 0, 2, 0),
c(1, 4, 2, 2, 1, 1, 8, 1, 5, 1, 5, 1, 1, 1, 2, 1,1, 1, 3, 1, 2, 1, 4)),
X3=rep(c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1),
c(6, 1, 3, 1, 3, 1, 1, 5, 1, 3, 7, 1, 1, 3, 1, 1, 2, 9)),
Y=rep(c(0,  1,   0,  1), c(15, 10, 15, 10))
)
life = data.frame(
X1=c(2.5, 173, 119, 10, 502, 4, 14.4, 2, 40, 6.6,21.4, 2.8, 2.5, 6, 3.5, 62.2, 10.8, 21.6, 2, 3.4,5.1, 2.4, 1.7, 1.1, 12.8, 1.2, 3.5, 39.7, 62.4, 2.4,34.7, 28.4, 0.9, 30.6, 5.8, 6.1, 2.7, 4.7, 128, 35,2, 8.5, 2, 2, 4.3, 244.8, 4, 5.1, 32, 1.4),
X2=rep(c(0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,0, 2, 0, 2, 0, 2, 0),
c(1, 4, 2, 2, 1, 1, 8, 1, 5, 1, 5, 1, 1, 1, 2, 1,1, 1, 3, 1, 2, 1, 4)),
X3=rep(c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1),
c(6, 1, 3, 1, 3, 1, 1, 5, 1, 3, 7, 1, 1, 3, 1, 1, 2, 9)),
Y=rep(c(0,  1,   0,  1), c(15, 10, 15, 10))
)
View(life)
View(life)
View(life)
View(life)
mydata <- read.table("../testing/data_glm_test")
setwd("~/GitHub/machine_learning/GLM")
mydata <- read.table("../testing/data_glm_test")
View(mydata)
View(life)
mydata <- read.table("../testing/data_glm_test")
View(mydata)
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5+1, data=mydata, , family = poisson())
y_pre <- predict(my_test, mydata)
mydata <- read.table("../testing/data_glm_test")
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5+1, data=mydata, , family = poisson())
my_test <- glm(mydata$V4~mydata$V1+mydata$V2+mydata$V3, data=mydata, , family = poisson())
y_pre <- predict(my_test, mydata)
print (y_pre)
mydata <- read.table("../testing/data_glm")
my_test <- glm(mydata$V4~mydata$V1+mydata$V2+mydata$V3, data=mydata, , family = poisson())
y_pre <- predict(my_test, mydata)
print (y_pre)
mydata <- read.table("../testing/data_glm")
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5+1, data=mydata, , family = poisson())
y_pre <- predict(my_test, mydata)
print (y_pre)
print (y_pre*2)
print (exp(y_pre))
print (exp(y_pre)/(1+exp(y_pre)))
print (exp(y_pre)/(1-exp(y_pre)))
print (exp(y_pre)/(1+exp(y_pre)))
mydata <- read.table("../testing/data_glm")
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata, , family = poisson())
y_pre <- predict(my_test, mydata)
print (exp(y_pre)/(1+exp(y_pre)))
mydata <- read.table("../testing/data_glm")
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata, , family = binomial())
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata, , family = binomial())
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata, , family = binomial
y_pre <- predict(my_test, mydata)
print (exp(y_pre)/(1+exp(y_pre)))
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata, , family = binomial)
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata, , family = binomial())
y_pre <- predict(my_test, mydata)
print (exp(y_pre)/(1+exp(y_pre)))
mydata <- read.table("../testing/data_glm")
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata, iter = 10,family = binomial())
mydata <- read.table("../testing/data_glm")
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata, iter = 10,family = binomial("logit"))
mydata <- read.table("../testing/data_glm")
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata,family = binomial("logit"))
y_pre <- predict(my_test, mydata)
print (exp(y_pre)/(1+exp(y_pre)))
my_test <- glm(mydata$V6~mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5, data=mydata,family = binomial("logit"))
y_pre <- predict(my_test, mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5)
y_pre <- predict(my_test, data.frame(mydata$V1+mydata$V2+mydata$V3+mydata$V4+mydata$V5))
print (exp(y_pre)/(1+exp(y_pre)))
//print (exp(y_pre)/(1+exp(y_pre)))
print (y_pre)
View(mydata)
